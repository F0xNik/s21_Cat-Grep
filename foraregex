#include<stdio.h>
#include<regex.h>
#include <string.h>

regex_t re;
regmatch_t pmatch[1];

int main(int argc, char* argv[]){
    FILE *fp;
    char buffer[250] = "";
    char patern[250] = "";
    int res;
    char argv_pat[100] = "";
    int count =0;
    int i =0;
    strcat(patern,argv[1]);
    strcat(patern,"|");
    strcat(patern,argv[2]);
     strcat(patern,"|");
    strcat(patern,argv[3]);
    //strcat(patern,"\0");
    //regcomp(&re, patern, 0);
    //printf("%s\n",patern);
    fp = fopen(argv[4], "r");
    if(fp != NULL) {
        while(!feof(fp)) {
            fgets(buffer, 250, fp);
            for (i=0; patern[i]!='\0'; i++){
                if(patern[i] != '|' && patern[i+1]!='\0'){
                    //printf("\n(%s)",patern);
                    argv_pat[count] = patern[i];
                    //printf(" %c ",argv_pat[count]);
                    count++;
                }
                else {
                    if (patern[i+1]=='\0')
                        argv_pat[count] = patern[i];
                    //printf(" (%s) ",argv_pat);
                    regcomp(&re, argv_pat, 0);
                    //printf("(%s)",patern);
                    count=0;
                    memset(argv_pat, '\0', sizeof(char));
                    //printf("\nmem  (%s) ",argv_pat);
                    res = regexec(&re, buffer, 250, pmatch, 0);
                    //printf(" (%d) ",res);
                    if(res == 0){
                        printf("%s", buffer);
                    }
                    regfree(&re);
                }
            }
            count = 0;
        }
        // printf("(%s)",patern);
        // res = regexec(&re, buffer, 250, pmatch, REG_NOTEOL);
        // if(res == 0)
        //     printf("%s", buffer);
        // }
        // regfree(&re);
    }
    return 0;
}
